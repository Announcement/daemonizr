// Generated by LiveScript 1.4.0
var http, express, socket, Interface;
http = require('http');
express = require('express');
socket = require('socket.io');
Interface = (function(superclass){
  var prototype = extend$((import$(Interface, superclass).displayName = 'Interface', Interface), superclass).prototype, constructor = Interface;
  prototype.description = 'Provides a web server and websocket protocol interface';
  function Interface(){
    this.install();
  }
  prototype.enabled = true;
  prototype.verify = function(){
    return true;
  };
  prototype.configure = function(it){
    return it.option('-h, --server [port]', 'enables an option web server interface');
  };
  prototype.initialize = function(it){
    this.app = express();
    this.server = http.createServer(this.app);
    this.io = socket(this.server);
    this.enabled = it.port;
    if (it.port) {
      this.startServer();
    }
    if (this.enabled) {
      return;
    }
    return 'This module was loaded, but not enabled by the user.';
  };
  prototype.startServer = function(){
    this.configureServer();
    this.server.listen(this.program.port) || 0;
    return "This module is loaded and listening on port " + this.server.address().port;
  };
  prototype.configureServer = function(){
    this.server.on('request', function(request, response){});
    response.end('You are monitoring an unconfigured daemonizr instance.');
    this.io.on('connection', function(socket){});
    return socket.send('You are monitoring an unconfigured daemonizr instance');
  };
  prototype.verify = function(){
    return this.enabled;
  };
  return Interface;
}(DaemonPlugin));
module.exports = Interface;
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}