// Generated by LiveScript 1.4.0
var EventsDaemon;
EventsDaemon = (function(superclass){
  var prototype = extend$((import$(EventsDaemon, superclass).displayName = 'EventsDaemon', EventsDaemon), superclass).prototype, constructor = EventsDaemon;
  prototype.description = 'allows for definitions of activities such as reload on file change';
  prototype.enabled = true;
  function EventsDaemon(){
    this.install();
  }
  prototype.configure = function(it){
    it.option('-a, --autonomous', 'listens to the various restart triggering signals');
    it.option('-e, --errors', 'watch the process for errors, provides an error event');
    it.option('-E, --enforce-errors', 'watch the process for errors, provides handlers for error types');
    it.option('-w, --watch', 'watch the file for changes, provides an update event');
    it.option('-d, --directory', 'watches the entire directory for changes');
    return it.option('-r, --recursive', 'allows recursive directory watching');
  };
  prototype.initialize = function(it){
    this.parseParameters(it);
    this.enabled = it.autonomous;
    if (!this.enabled) {
      return false;
    }
  };
  prototype.verify = function(){
    return this.enabled;
  };
  prototype.notice = function(it){
    return console.log(it, constructor.displayName);
  };
  prototype.parseParameters = function(it){
    if (it.errors) {
      it.autonomous = true;
    }
    if (it.watch) {
      it.autonomous = true;
    }
    if (it.directory) {
      it.watch = true;
    }
    if (it.recursive) {
      return it.directory = true, it.watch = true, it;
    }
  };
  return EventsDaemon;
}(DaemonPlugin));
module.exports = EventsDaemon;
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}